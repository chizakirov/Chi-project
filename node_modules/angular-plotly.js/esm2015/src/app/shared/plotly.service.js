/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class PlotlyService {
    /**
     * @param {?} plotly
     * @return {?}
     */
    static setPlotly(plotly) {
        PlotlyService._plotly = plotly;
    }
    /**
     * @param {?} instance
     * @return {?}
     */
    static insert(instance) {
        /** @type {?} */
        const index = PlotlyService.instances.indexOf(instance);
        if (index === -1) {
            PlotlyService.instances.push(instance);
        }
        return instance;
    }
    /**
     * @param {?} div
     * @return {?}
     */
    static remove(div) {
        /** @type {?} */
        const index = PlotlyService.instances.indexOf(div);
        if (index >= 0) {
            PlotlyService.instances.splice(index, 1);
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getInstanceByDivId(id) {
        for (const instance of PlotlyService.instances) {
            if (instance.id === id) {
                return instance;
            }
        }
        return undefined;
    }
    /**
     * @return {?}
     */
    getPlotly() {
        if (typeof PlotlyService._plotly === 'undefined') {
            throw new Error(`Peer dependency plotly.js isn't installed`);
        }
        return PlotlyService._plotly;
    }
    /**
     * @protected
     * @param {?} fn
     * @return {?}
     */
    waitFor(fn) {
        return new Promise((resolve) => {
            /** @type {?} */
            const localFn = () => {
                fn() ? resolve() : setTimeout(localFn, 10);
            };
            localFn();
        });
    }
    /**
     * @param {?} div
     * @param {?} data
     * @param {?=} layout
     * @param {?=} config
     * @return {?}
     */
    newPlot(div, data, layout, config) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.waitFor(() => this.getPlotly() !== 'waiting');
            return (/** @type {?} */ (this.getPlotly().newPlot(div, data, layout, config).then(instance => PlotlyService.insert(instance))));
        });
    }
    /**
     * @param {?} div
     * @param {?} data
     * @param {?=} layout
     * @param {?=} config
     * @return {?}
     */
    plot(div, data, layout, config) {
        return (/** @type {?} */ (this.getPlotly().plot(div, data, layout, config)));
    }
    /**
     * @param {?} div
     * @param {?} data
     * @param {?=} layout
     * @param {?=} config
     * @return {?}
     */
    update(div, data, layout, config) {
        return (/** @type {?} */ (this.getPlotly().react(div, data, layout, config)));
    }
    /**
     * @param {?} div
     * @return {?}
     */
    resize(div) {
        return this.getPlotly().Plots.resize(div);
    }
}
PlotlyService.instances = [];
PlotlyService._plotly = undefined;
PlotlyService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ PlotlyService.ngInjectableDef = i0.defineInjectable({ factory: function PlotlyService_Factory() { return new PlotlyService(); }, token: PlotlyService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    PlotlyService.instances;
    /**
     * @type {?}
     * @protected
     */
    PlotlyService._plotly;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxvdGx5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXBsb3RseS5qcy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL3Bsb3RseS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFPM0MsTUFBTSxPQUFPLGFBQWE7Ozs7O0lBSWYsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFXO1FBQy9CLGFBQWEsQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQ25DLENBQUM7Ozs7O0lBRU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFrQzs7Y0FDN0MsS0FBSyxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUN2RCxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNkLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzFDO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQzs7Ozs7SUFFTSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQTZCOztjQUN4QyxLQUFLLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQ2xELElBQUksS0FBSyxJQUFJLENBQUMsRUFBRTtZQUNaLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztTQUM1QztJQUNMLENBQUM7Ozs7O0lBRU0sa0JBQWtCLENBQUMsRUFBVTtRQUNoQyxLQUFLLE1BQU0sUUFBUSxJQUFJLGFBQWEsQ0FBQyxTQUFTLEVBQUU7WUFDNUMsSUFBSSxRQUFRLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDcEIsT0FBTyxRQUFRLENBQUM7YUFDbkI7U0FDSjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7Ozs7SUFFTSxTQUFTO1FBQ1osSUFBSSxPQUFPLGFBQWEsQ0FBQyxPQUFPLEtBQUssV0FBVyxFQUFFO1lBQzlDLE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztTQUNoRTtRQUVELE9BQU8sYUFBYSxDQUFDLE9BQU8sQ0FBQztJQUNqQyxDQUFDOzs7Ozs7SUFFUyxPQUFPLENBQUMsRUFBaUI7UUFDL0IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFOztrQkFDckIsT0FBTyxHQUFHLEdBQUcsRUFBRTtnQkFDakIsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQy9DLENBQUM7WUFFRCxPQUFPLEVBQUUsQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7Ozs7SUFFWSxPQUFPLENBQUMsR0FBbUIsRUFBRSxJQUFtQixFQUFFLE1BQStCLEVBQUUsTUFBK0I7O1lBQzNILE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssU0FBUyxDQUFDLENBQUM7WUFDekQsT0FBTyxtQkFBQSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBZ0IsQ0FBQztRQUNoSSxDQUFDO0tBQUE7Ozs7Ozs7O0lBRU0sSUFBSSxDQUFDLEdBQTZCLEVBQUUsSUFBbUIsRUFBRSxNQUErQixFQUFFLE1BQStCO1FBQzVILE9BQU8sbUJBQUEsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsRUFBZ0IsQ0FBQztJQUM1RSxDQUFDOzs7Ozs7OztJQUVNLE1BQU0sQ0FBQyxHQUE2QixFQUFFLElBQW1CLEVBQUUsTUFBK0IsRUFBRSxNQUErQjtRQUM5SCxPQUFPLG1CQUFBLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLEVBQWdCLENBQUM7SUFDN0UsQ0FBQzs7Ozs7SUFFTSxNQUFNLENBQUMsR0FBNkI7UUFDdkMsT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QyxDQUFDOztBQWhFZ0IsdUJBQVMsR0FBK0IsRUFBRSxDQUFDO0FBQzNDLHFCQUFPLEdBQVMsU0FBUyxDQUFDOztZQUw5QyxVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7Ozs7O0lBRUcsd0JBQTREOzs7OztJQUM1RCxzQkFBMkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQbG90bHkgfSBmcm9tICcuL3Bsb3RseS5pbnRlcmZhY2UnO1xuXG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUGxvdGx5U2VydmljZSB7XG4gICAgcHJvdGVjdGVkIHN0YXRpYyBpbnN0YW5jZXM6IFBsb3RseS5QbG90bHlIVE1MRWxlbWVudFtdID0gW107XG4gICAgcHJvdGVjdGVkIHN0YXRpYyBfcGxvdGx5PzogYW55ID0gdW5kZWZpbmVkO1xuXG4gICAgcHVibGljIHN0YXRpYyBzZXRQbG90bHkocGxvdGx5OiBhbnkpIHtcbiAgICAgICAgUGxvdGx5U2VydmljZS5fcGxvdGx5ID0gcGxvdGx5O1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaW5zZXJ0KGluc3RhbmNlOiBQbG90bHkuUGxvdGx5SFRNTEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBQbG90bHlTZXJ2aWNlLmluc3RhbmNlcy5pbmRleE9mKGluc3RhbmNlKTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgUGxvdGx5U2VydmljZS5pbnN0YW5jZXMucHVzaChpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgcmVtb3ZlKGRpdjogUGxvdGx5LlBsb3RseUhUTUxFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gUGxvdGx5U2VydmljZS5pbnN0YW5jZXMuaW5kZXhPZihkaXYpO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgUGxvdGx5U2VydmljZS5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRJbnN0YW5jZUJ5RGl2SWQoaWQ6IHN0cmluZyk6IFBsb3RseS5QbG90bHlIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGZvciAoY29uc3QgaW5zdGFuY2Ugb2YgUGxvdGx5U2VydmljZS5pbnN0YW5jZXMpIHtcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZS5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UGxvdGx5KCkge1xuICAgICAgICBpZiAodHlwZW9mIFBsb3RseVNlcnZpY2UuX3Bsb3RseSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUGVlciBkZXBlbmRlbmN5IHBsb3RseS5qcyBpc24ndCBpbnN0YWxsZWRgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQbG90bHlTZXJ2aWNlLl9wbG90bHk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHdhaXRGb3IoZm46ICgpID0+IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbEZuID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGZuKCkgPyByZXNvbHZlKCkgOiBzZXRUaW1lb3V0KGxvY2FsRm4sIDEwKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxvY2FsRm4oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIG5ld1Bsb3QoZGl2OiBIVE1MRGl2RWxlbWVudCwgZGF0YTogUGxvdGx5LkRhdGFbXSwgbGF5b3V0PzogUGFydGlhbDxQbG90bHkuTGF5b3V0PiwgY29uZmlnPzogUGFydGlhbDxQbG90bHkuQ29uZmlnPikge1xuICAgICAgICBhd2FpdCB0aGlzLndhaXRGb3IoKCkgPT4gdGhpcy5nZXRQbG90bHkoKSAhPT0gJ3dhaXRpbmcnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGxvdGx5KCkubmV3UGxvdChkaXYsIGRhdGEsIGxheW91dCwgY29uZmlnKS50aGVuKGluc3RhbmNlID0+IFBsb3RseVNlcnZpY2UuaW5zZXJ0KGluc3RhbmNlKSkgYXMgUHJvbWlzZTxhbnk+O1xuICAgIH1cblxuICAgIHB1YmxpYyBwbG90KGRpdjogUGxvdGx5LlBsb3RseUhUTUxFbGVtZW50LCBkYXRhOiBQbG90bHkuRGF0YVtdLCBsYXlvdXQ/OiBQYXJ0aWFsPFBsb3RseS5MYXlvdXQ+LCBjb25maWc/OiBQYXJ0aWFsPFBsb3RseS5Db25maWc+KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBsb3RseSgpLnBsb3QoZGl2LCBkYXRhLCBsYXlvdXQsIGNvbmZpZykgYXMgUHJvbWlzZTxhbnk+O1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGUoZGl2OiBQbG90bHkuUGxvdGx5SFRNTEVsZW1lbnQsIGRhdGE6IFBsb3RseS5EYXRhW10sIGxheW91dD86IFBhcnRpYWw8UGxvdGx5LkxheW91dD4sIGNvbmZpZz86IFBhcnRpYWw8UGxvdGx5LkNvbmZpZz4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGxvdGx5KCkucmVhY3QoZGl2LCBkYXRhLCBsYXlvdXQsIGNvbmZpZykgYXMgUHJvbWlzZTxhbnk+O1xuICAgIH1cblxuICAgIHB1YmxpYyByZXNpemUoZGl2OiBQbG90bHkuUGxvdGx5SFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGxvdGx5KCkuUGxvdHMucmVzaXplKGRpdik7XG4gICAgfVxufVxuIl19